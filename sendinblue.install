<?php

/**
 * @file
 * The installation point of Sendinblue module.
 */

use Drupal\sendinblue\SendinblueManager;

/**
 * @file
 * Install, update and uninstall functions for the sendinblue module.
 */

/**
 * Implements hook_schema().
 */
function sendinblue_schema() {
  $schema['sendinblue_signup'] = [
    'fields' => [
      'mcsId' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique sendinblue_signup entity ID.',
      ],
      'name' => [
        'description' => 'The machine-readable name of this sendinblue_signup.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ],
      'mcLists' => [
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of list IDs with list-specific configuration.',
      ],
      'mode' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Signifies the display mode for this signup form.',
      ],
      'title' => [
        'type' => 'varchar',
        'length' => 32,
        'description' => 'The {sendinblue_lists}.label of this sendinblue_list.',
        'not null' => TRUE,
        'default' => '',
      ],
      'settings' => [
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized object that stores the settings for the specific list.',
      ],
      'status' => [
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ],
      'module' => [
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['mcsId'],
    'unique key' => ['name'],
  ];

  $schema['sendinblue_contact'] = [
    'fields' => [
      'sc_id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique sendinblue_contact entity ID.',
      ],
      'email' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Unique Key: Unique the email of a subscriber.',
      ],
      'info' => [
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'All information of a subscriber.',
      ],
      'code' => [
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'description' => 'Unique identifier for a subscriber on frontend.',
      ],
      'is_active' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
      ],
    ],
    'primary key' => ['sc_id'],
    'unique key' => ['email'],
  ];
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function sendinblue_uninstall() {
  \Drupal::getContainer()
    ->get('config.factory')
    ->getEditable(SendinblueManager::CONFIG_SETTINGS)->delete();

  \Drupal::getContainer()
    ->get('config.factory')
    ->getEditable(SendinblueManager::CONFIG_SETTINGS_SEND_EMAIL)->delete();

  \Drupal::getContainer()
    ->get('config.factory')
    ->getEditable(SendinblueManager::CONFIG_SETTINGS_REGISTERING_USER)->delete();
}

/**
 * Implements hook_requirements().
 */
function sendinblue_requirements($phase) {
  $requirements = [];
  // Ensure translations don't break at install time:
  $has_curl = function_exists('curl_init');
  if (!$has_curl) {
    $requirements['sendinblue'] = [
      'title' => t('SendinBlue'),
      'description' => t('SendinBlue module could not be installed because the PHP <a href="@curl_url">cURL</a> library in not available', ['@curl_url' => 'http://php.net/manual/curl.setup.php']),
      'severity' => REQUIREMENT_ERROR,
    ];
  }
  return $requirements;
}
